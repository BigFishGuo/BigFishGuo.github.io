/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/

@1-name: '1';
@1-x: 0px;
@1-y: 101px;
@1-offset-x: 0px;
@1-offset-y: -101px;
@1-width: 25px;
@1-height: 24px;
@1-total-width: 429px;
@1-total-height: 125px;
@1-image: '../../images/sprite_2/happy_sprite.png';
@1: 0px 101px 0px -101px 25px 24px 429px 125px '../../images/sprite_2/happy_sprite.png' '1';
@2-name: '2';
@2-x: 0px;
@2-y: 0px;
@2-offset-x: 0px;
@2-offset-y: 0px;
@2-width: 429px;
@2-height: 91px;
@2-total-width: 429px;
@2-total-height: 125px;
@2-image: '../../images/sprite_2/happy_sprite.png';
@2: 0px 0px 0px 0px 429px 91px 429px 125px '../../images/sprite_2/happy_sprite.png' '2';
@3-name: '3';
@3-x: 35px;
@3-y: 101px;
@3-offset-x: -35px;
@3-offset-y: -101px;
@3-width: 21px;
@3-height: 14px;
@3-total-width: 429px;
@3-total-height: 125px;
@3-image: '../../images/sprite_2/happy_sprite.png';
@3: 35px 101px -35px -101px 21px 14px 429px 125px '../../images/sprite_2/happy_sprite.png' '3';
@spritesheet-width: 429px;
@spritesheet-height: 125px;
@spritesheet-image: '../../images/sprite_2/happy_sprite.png';
@spritesheet-sprites: @1 @2 @3;
@spritesheet: 429px 125px '../../images/sprite_2/happy_sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

.sprite-width(@sprite) {
    width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
    height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
    @sprite-offset-x: extract(@sprite, 3);
    @sprite-offset-y: extract(@sprite, 4);
    background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
    @sprite-image: extract(@sprite, 9);
    @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
    background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
    .sprite-image(@sprite);
    .sprite-position(@sprite);
    .sprite-width(@sprite);
    .sprite-height(@sprite);
}


/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/

.sprites(@sprites, @i: 1) when (@i <=length(@sprites)) {
    @sprite: extract(@sprites, @i);
    @sprite-name: e(extract(@sprite, 10));
    .@ {
        sprite-name
    }
    {
        .sprite(@sprite);
    }
    .sprites(@sprites, @i + 1);
}
